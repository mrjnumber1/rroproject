//==============================
//Hunting/Gathering Mission boards
//by Derceto \o   <------- and then shit all over by mrjnumber1 :)
//==============================

//    MAP REGS
//
//$MD_slots              Max Missions per char
//$MD_maxMobs            Max Mobs per mission
//$MD_maxItems           Max Items per Mission
//$MD_maxRewards         Max Reward Items per mission
//
//
//$MD_missionBonusEXP    Bonus EXP per kill
// 
//        NOTE that these stack with $MD_missionBonusEXP!
//$MD_bossBonusEXP       Bonus EXP per kill of boss mob
//$MD_normalBonusEXP     Bonus EXP per kill of normal mob
//
//
//         The array are usually self-explanatory, these may not be!
//$MD_type[ID]     0 = Disabled |||| 1 = Mission |||| 2 = Hat Q |||| beyond = ?
//$MD_cooldown[ID] Cooldown in SECONDS of mission ID
//$MD_expMult[ID]  100 = each quest completion gives 100% exp from mobs*kills*normalbonusexp/100*md_missionbonusexp/100

	
//     CHAR REGS
//
//MD_mission_x_time    // Last time of completion of mission x
//MD_slotX_ID          // mission ID in slot X; 0 for no mission of course!
//MD_slotX_mCountY     // mobs of Y killed in slot X
//MD_mission_points    // mission points received


-	script	loadMissions	-1,{
end;
OnInit:
	function add_mission;
	
	set $MD_slots, 4; // max missions per character
	
	set $MD_maxMobs, 6; // as this changes, the other things need modded as well :) and :(
	set $MD_maxItems, 6;
	set $MD_maxRewards, 5;
	
	set $MD_missionBonusEXP, 150; 	// @ 100, this would mean they give equal exp as normal kills
	 
	set $MD_bossBonusEXP, 150; 
	set $MD_normalBonusEXP, 120;	
	
	set $MD_minLevel$[0], 100; // this is set so that missions are loaded starting from index 1;
	
//note: NEVER EVER CHANGE THIS ORDERING OR I WILL END YOU
	// type 0 = disabled
	// type 1 = mission quest
	// type 2 = hat quest
	setarray $MD_type[0],0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1; 
// 1-80 are enabled as of this revision! If you update this you better update this comment or else pain will be coming!

// use ^90000 for any mob names
// use ^117700 for any field names
// use ^442200 for any dungeon names
	set .missionsloaded, 0;
	
	if (.missionsloaded != 1)
	{
	//add missions here
	
	//end missions functions
	}
	
	set .@missionsloaded, 1;

	function add_mission {
		//add_mission(name, recmap, cooldown in s yes, minlv, maxlv, misspts, expmult, mob1, mobc1 ... item1, itemc1, ... , reward1, rewardc1, ... );
		set .@i, getarraysize($MD_minLevel$);
		if (.@i == 0)
			set .@i, 1;
		
		set $MD_name$[.@i]   ,   getarg(0);
		set $MD_map$[.@i]    ,   getarg(1);
		set $MD_cooldown[.@i],   getarg(2);
		set $MD_minLevel[.@i],   getarg(3);
		set $MD_maxLevel[.@i],   getarg(4);
		set $MD_missionPoints[.@i], getarg(5);
		set $MD_expMult[.@i],    getarg(6);
		
		set .@j, 0;
		set .@base, 7;
		for (set .@j, 0; .@j < $MD_maxMobs; set .@j, .@j + 1)
		{
			setd "$MD_mob"+(.@j+1)+"["+.@i+"]", getarg(.@base+.@j*2)
			setd "$MD_mCount"+(.@j+1)+"["+.@i+"]" , getarg(.@base+.@j*2+1);
		}
		set .@base, .@base + (.@j*2) + 1 + 1;
		set .@j, 0; // yes, i'm paranoid :)
		for (set .@j, 0; .@j < $MD_maxItems; set .@j, .@j + 1)
		{
			setd "$MD_item"+(.@j+1)+"["+.@i+"]", getarg(.@base+.@j*2)
			setd "$MD_iCount"+(.@j+1)+"["+.@i+"]" , getarg(.@base+.@j*2+1);
		}
		set .@base, .@base + (.@j*2)+1 + 1;
		set .@j, 0;
		for (set .@j, 0; .@j < $MD_maxRewards; set .@j, .@j + 1)
		{
			setd "$MD_reward"+(.@j+1)+"["+.@i+"]", getarg(.@base+.@j*2)
			setd "$MD_rCount"+(.@j+1)+"["+.@i+"]" , getarg(.@base+.@j*2+1);
		}
		set .@base, .@base + (.@j*2)+1 + 1;
		
		
		
		
		// done reading from args, calculate EXP value here.
	
		set .@bexp, 0;
		set .@jexp, 0;
		
		set .@quest_exp_rate,getbattleflag("quest_exp_rate")/ 100 ;
		set .@base_exp_rate, getbattleflag("base_exp_rate") / 100;
		set .@job_exp_rate,  getbattleflag("job_exp_rate")  / 100;

		
		for (set .@j, 0; .@j < $MD_maxMobs; set .@j, .@j + 1)
		{
			set .@mob_id, getd("$MD_mob"+.@j+"["+.@i+"]");
			set .@mob_count, getd("$MD_mCount"+.@j+"["+.@i+"]");
			
			if ( getmonsterinfo(.@mob_id, MOB_MAXHP) >= 1  && .@mob_count > 0) // that is to say, does it exist?
			{
				set .@mob_bexp, getmonsterinfo(.@mob_id, MOB_BASEEXP);
				set .@mob_jexp, getmonsterinfo(.@mob_id, MOB_JOBEXP);
				set .@is_boss, getmonsterinfo(.@mob_id, MOB_MODE) & 32;
				
				if (.@mob_bexp > 0 )
				{
					if(.@is_boss)
						set .@bexp, .@bexp + ( ( .@mob_bexp * $MD_bossBonusEXP / 100 ) * .@mob_count );
					else
						set .@bexp, .@bexp + ( ( .@mob_bexp * $MD_normalBonusEXP / 100 ) * .@mob_count );
				}
				if (.@mob_jexp > 0 )
				{
					if(.@is_boss)
						set .@jexp, .@jexp + ( ( .@mob_jexp * $MD_bossBonusEXP / 100 ) * .@mob_count );
					else
						set .@jexp, .@jexp + ( ( .@mob_bexp * $MD_normalBonusEXP / 100 ) * .@mob_count );
				}
				}
			}
		}
		
		// divide by quest exp rate because it'll screw thhings up!
		// divide after multiplying by quest rate so that low exp mobs will not give 0, cause that'd suck shit!
		set $MD_bExp[.@i], .@bexp *  .@base_exp_rate / .@quest_exp_rate * $MD_expMult[.@i] / 100 *$MD_missionBonusEXP / 100;
		set $MD_jExp[.@i], .@jexp *  .@job_exp_rate  / .@quest_exp_rate * $MD_expMult[.@i] / 100 *$MD_missionBonusEXP / 100;
	}
}


-	script	MissionMapAnnounce	-1,{
	end;
	
OnInit:
		
	for( set .@i,0; .@i < getarraysize( $MD_map$ ); set .@i,.@i + 1 )
		setmapflag .missionMaps$[.@i], mf_loadevent;
	end;

OnPCLoadMapEvent:
OnPCBaseLvUpEvent:
	for( set .@i,0; .@i < getarraysize( $MD_map$ ); set .@i,.@i + 1 )
	{
		if( strcharinfo(3) == $MD_map$[.i] && BaseLevel > $MD_minLevel[.@i] && BaseLevel < $MD_maxLevel[.@i])
		{
			for ( set .@j, 0; .@j < getarraysize($MD_slots); set .@jm .@j + 1 )
			{
				if( 
					   ( getd("MD_Slot"+.@j+"_ID") == .@i ) 
					|| ( (gettimetick() - getd("MD_mission_"+.@j+"_time"))  > $MD_cooldown[.@i] ) 
				  )
					continue;
			}
			announce "The mission ["+$MD_name$+"] is recommended for this map.",bc_self;
		}
	}
			
	end;

}



function	script	F_acceptMission	{
	set .@slot, getarg(0);
	set .@mission, getarg(1);

	set .@str$, "MD_slot"+.@slot;
	
	setd .@str$+"_ID", .@mission;
	
	setd "MD_mission"+.@mission+"_time", 0;
	for(set .@i, 0; .@i < $MD_slots; set .@i, .@i + 1)
		setd .@str$+"_mCount"+.@i, 0;
}

// 1 = needs more mobs
// 2 = needs more items
// 3 = need more weight for the items 
// 0 = all good
function	script	F_completeMission	{
	set .@slot, getarg(0);
	set .@str$, "MD_slot"+.@slot;
	set .@mission, getd(.@str$+"_ID");
	
	// check that all mobs are killed by the player
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		if ( getelementofarray(getd( "$MD_mob"+.@i+1), .@mission) )
		{
			if ( getd(.@str$+"_mCount".@i+1) < getelementofarray( getd("$MD_mCount"+(.@i+1) ), .@mission) )
				return 1;
		}
	}
	
	// check that the player has every item
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		if ( .@itemid )
		{
			if( countitem(.@itemid) < .@itemcount )
				return 2;
		}
	}
	
	// ensure the player can old every reward
	set .@rewards[0], 0;
	set .@rewardcounts[0], 0;
	for (set .@i, 0; .@i < $MD_maxRewards; set .@i, .@i+1)
	{
		set .@rewards[.@i], getelementofarray(getd("$MD_reward"+(.@i+1)), .@mission);
		set .@rewardcounts[.@i], getelementofarray(getd("$MD_rCount"+(.@i+1)));
	}
	if ( !checkweights(.@rewards. .@rewardcounts) )
		return 3;
	
	
	// delete required items
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		if ( .@itemid && .@itemcount)
		{
			delitem .@itemid, .@itemcount;
		}
	}
	
	// give reward items
	for (set .@i, 0; .@i < $MD_maxRewards; set .@i, .@i+1)
	{
		set .@rewardid, getelementofarray(getd("$MD_reward"+(.@i+1)), .@mission);
		set .@rewardcount, getelementofarray(getd("$MD_rCount"+(.@i+1)));
		
		if ( .@rewardid && .@rewardcount)
		{
			getitem .@rewardid, .@rewardcount;
		}
	}
	
	getexp_without_points $MD_bExp[.@mission], $MD_jExp[.@mission];
	
	
	set .@points, ( $MD_bExp[.@mission] / getbattleflag("base_exp_rate") ) + ($MD_bExp[.@mission] / getbattleflag("job_exp_rate") );
	set .@points, .@points / 100000;
	
	if (.@points > 100)
		set .@points, 100;
	else if (.@points < 3)
		set .@points, 3;
		
	getpoints .@points;
	
	set MD_mission_points, MD_mission_points + $MD_missionPoints[.@mission];
	
	callfunc "F_endMission", .@slot, .@mission;
	
	return 0;
	
}

// resets player mission variables to default state
// remember, id -1 is no mission selected
function	script	F_endMission	{
	set .@slot, getarg(0);
	set .@mission, getarg(1);

	set .@str$, "MD_slot"+.@slot;
	
	setd .@str$+"_ID", -1; 
	setd "MD_mission"+.@mission+"_time", gettimetick();
	
	for(set .@i, 0; .@i < $MD_slots; set .@i, .@i + 1)
		setd .@str$+"_mCount"+.@i, 0;
	
	return;
}

// 1 = user has taken it
// 0 = user has not taken it
// arg0 = mission id
function	script	F_isMissionTaken	{
	.@mission, getarg(0);
	
	for (set .@i, 0; .@i < $MD_slots; set .@i, .@i+1)
	{
		if ( getd("MD_slot"+.@i+"_ID" == .@mission) )
		{
			return 1;
		}
	}
	
	return 0;
	
}

// returns free mission slot or -1 if there isn't one
function	script	F_getFreeSlot	{
	for (set .@i, 0; .@i < $MD_slots; set .@i, .@i + 1)
	{
		if( getd("MD_Slot"+.@i+"_ID" == 0)
		{
			return .@i;
		}
	}
	
	return -1;
}


function	script	F_messageMissionProgress	{
	set .@slot, getarg(0);
	set .@str$, "MD_slot"+.@slot;
	
	set .@mission, getd(.@str$+"_ID");
	
	
	message strcharinfo(0), "  " + $MD_name$[.@mission];
	
	//hunt progress
	
	// display header if relevant
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		set .@mobid, getelementofarray(getd( "$MD_mob"+.@i+1), .@mission);
		set .@mobcount, getelementofarray( getd("$MD_mCount"+(.@i+1), .@mission );
		
		if (.@mobid && .@mobcount)
		{
			message strcharinfo(0), "   Mobs:";
			break;
		}
	}
	
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		set .@mobid, getelementofarray(getd( "$MD_mob"+.@i+1), .@mission);
		set .@mobcount, getelementofarray( getd("$MD_mCount"+(.@i+1), .@mission );
		
		set .@mobname, getmonsterinfo(.@mobid, MOB_NAME);
		
		set .@killedcount, getd(.@str$+"_mCount".@i+1);
		
		if (.@mobid && .@mobcount)
		{
			if(.@mobcount > .@killedcount)
			{
				message strcharinfo(0), "    " + .@mobname +": "+ .@killedcount +"/"+ .@mobcount;
			}
			else
			{
				message strcharinfo(0), "    " + .@mobname +": COMPLETE";
			}
		}
	}
	
	
	//display item req header if any are needed to be collected
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		if (.@itemid && .@itemcount)
		{
			message strcharinfo(0),"   Items:";
		}
	}
	
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		set .@itemname, getitemname(.@itemid);
		
		set .@retrievedcount, countitem(.@itemid);
		
		if ( .@itemid && .@itemcount)
		{
			if( .@itemcount > .@retrievedcount)
			{
				message strcharinfo(0), "    " + .@itemname +": "+ .@retrievedcount +"/"+ .@itemcount;
			}
			else
			{
				message strcharinfo(0), "    " + .@itemname +": COMPLETE";
			}
		}
	}
	
	
	
	// if ($MD_bExp[.@mission] || $MD_jExp[.@mission])
	// {
		// message strcharinfo(0), "   Rewards:";
		
		// if($MD_bExp[.@mission])
			// message strcharinfo(0), "    Base EXP: " + $MD_bExp[.@mission];
		// if($MD_jExp[.@mission])
			// message strcharinfo(0), "    Job EXP: " + $MD_jExp[.@mission];
	// }

	// for (set .@i, 0; .@i < $MD_maxRewards; set .@i, .@i+1)
	// {
		// set .@rewardid, getelementofarray(getd("$MD_reward"+(.@i+1)), .@mission);
		// set .@rewardcount, getelementofarray(getd("$MD_rCount"+(.@i+1)), .@mission);
		
		// if ( .@rewardid && .@rewardcount)
		// {
			// message strcharinfo(0), "    Item: " + getitemname(.@rewardid) + " (" + .@rewardcount + " ea)";
		// }
	// }
	
}

function	script	F_mesMissionInfo	{
	set .@slot, getarg(0);
	set .@str$, "MD_slot"+.@slot;
	
	set .@mission, getd(.@str$+"_ID");
	
	
	mes $MD_name$[.@mission];
	
	//hunt progress
	// display relevant header if it's... relevant
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		set .@mobid, getelementofarray(getd( "$MD_mob"+.@i+1), .@mission);
		set .@mobcount, getelementofarray( getd("$MD_mCount"+(.@i+1), .@mission );
		
		if (.@mobid && .@mobcount)
		{
			mes "Mobs: "
			break;
		}
	}
	
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		set .@mobid, getelementofarray(getd( "$MD_mob"+.@i+1), .@mission);
		set .@mobcount, getelementofarray( getd("$MD_mCount"+(.@i+1), .@mission );
		
		set .@mobname, getmonsterinfo(.@mobid, MOB_NAME);
		
		set .@killedcount, getd(.@str$+"_mCount".@i+1);
		
		if (.@mobid && .@mobcount)
		{
			if(.@mobcount > .@killedcount)
			{
				mes "  " + .@mobname +": ^FF0000"+ .@killedcount +"/"+ .@mobcount + "^000000";
			}
			else
			{
				mes "  " + .@mobname +": ^00FF00COMPLETE^000000";
			}
		}
	}
	
	// display relevant header if it's... relevant
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		if(.@itemid && .@itemcount)
		{
			mes "Items: "
			break;
		}
	}
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		set .@itemname, getitemname(.@itemid);
		
		set .@retrievedcount, countitem(.@itemid);
		
		if ( .@itemid && .@itemcount)
		{
			if( .@itemcount > .@retrievedcount)
			{
				mes "  " + .@itemname +": ^0000FF"+ .@retrievedcount +"/"+ .@itemcount + "^000000";
			}
			else
			{
				mes "  " + .@itemname +": ^00FF00COMPLETE^000000";
			}
		}
	}
	
}


// displays mission info in the NPC
function	script	F_showMissionInfo	{

	set .@mission, getarg(0)

	mes $MD_name$[.@mission];
	
	
	// display relevant header if it's... relevant
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		set .@mobid, getelementofarray(getd( "$MD_mob"+.@i+1), .@mission);
		set .@mobcount, getelementofarray( getd("$MD_mCount"+(.@i+1), .@mission );
		
		if (.@mobid && .@mobcount)
		{
			mes "Mobs: "
			break;
		}
	}
	
	for (set .@i, 0; .@i < $MD_maxMobs; set .@i, .@i + 1) 
	{
		set .@mobid, getelementofarray(getd( "$MD_mob"+.@i+1), .@mission);
		set .@mobcount, getelementofarray( getd("$MD_mCount"+(.@i+1), .@mission );
		
		set .@mobname, getmonsterinfo(.@mobid, MOB_NAME);
		
		if (.@mobid && .@mobcount)
		{
			mes  "Kill ^0000FF" + .@mobcount + " ^FF0000" + .@mobname + "^000000(s)";
		}
	}
	
	
	// display relevant header if it's... relevant
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		if(.@itemid && .@itemcount)
		{
			mes "Items: "
			break;
		}
	}
	
	for (set .@i, 0; .@i < $MD_maxItems; set .@i, .@i+1)
	{
		set .@itemid, getelementofarray(getd( "$MD_item"+(.@i+1)), .@mission);
		set .@itemcount, getelementofarray( getd("$MD_iCount"+(.@i+1) ), .@mission);
		
		set .@itemname, getitemname(.@itemid);
		
		
		if (.@itemid && .@itemcount)
		{
			mes  "Collect ^0000FF" + .@itemcount + " ^FF0000" + .@itemname + "^000000(s)";
		}
	}
	

	
	
	// display relevant header if it's... relevant
	for (set .@i, 0; .@i < $MD_maxRewards; set .@i, .@i+1)
	{
		set .@rewardid, getelementofarray(getd("$MD_reward"+(.@i+1)), .@mission);
		set .@rewardcount, getelementofarray(getd("$MD_rCount"+(.@i+1)));
		
		if (.@rewardid && .@rewardcount)
		{
			mes "Rewards: ";
			break;
		}
		
		if($MD_bExp[.@mission] || $MD_jExp[.@mission])
		{
			mes "Rewards: ";
			break;
		}
	}
		
		
		
	if ($MD_bExp[.@mission] || $MD_jExp[.@mission])
	{
		if($MD_bExp[.@mission])
			mes  "^0000FF" + $MD_bExp[.@mission] + "^000000 Base EXP";
		if($MD_jExp[.@mission])
			mes  "^0000FF" + $MD_jExp[.@mission] + "^000000 Job EXP";
	}

	for (set .@i, 0; .@i < $MD_maxRewards; set .@i, .@i+1)
	{
		set .@rewardid, getelementofarray(getd("$MD_reward"+(.@i+1)), .@mission);
		set .@rewardcount, getelementofarray(getd("$MD_rCount"+(.@i+1)));
		
		if ( .@rewardid && .@rewardcount)
		{
			mes  "^0000FF" + .@rewardcount + + " ^00FF00" +getitemname(.@rewardid) + "^000000 (" +  + " ea)";
		}
	}
	
	
	
	if ($MD_cooldown[.@mission])
	{
		mes "Cooldown: ^FF0000"+($MD_cooldown[.@mission] / 3600)+"^000000 Hours";
	}
	
	if ($MD_missionPoints[.@mission])
	{
		mes "Mission Points: ^442200"+($MD_missionPoints[.@mission])+"^000000";
	}
}


-	script	MD_killEvent	-1,{
end;

// TODO: move this to the src because it *sucks* being here, honestly. seriously. it'll be better in the src. ok?
ONNPCKillEvent:

	for (set .@i, 0; .@i < $MD_Slots; set .@i, .@i + 1) 
	{
		if (getd("MD_slot"+.@i+"_ID") > 0 ) 
		{
			
			if( getcharid(1) > 0 && getpartycanshare() == 0 )
			{
				break;
			}
			
			set .@str$, "MD_slot"+.@i;
			set .@mission, getd(.@str$+"_ID");
			
			// don't share kills if party share is unavailable!
			
			for (set .@j, 0; .@j < $MD_maxMobs; set .@j, .@j + 1)
			{
				.@mobid = getelementofarray(getd("$MD_mob"+(.@j+1)), .@mission);
				.@mobcount = getelementofarray(getd("$MD_mCount"+(.@j+1)), .@mission);
				
				if (killedrid == .@mobid)
				{
					set .@mobsKilledStr$, getd(.@str$+"_mCount")+.@j;
					set .@mobsKilled, getd(.@mobsKilledStr$);
					
					setd .@mobsKilledStr$, .@mobsKilled + 1;
					if (.@mobsKilled < .@mobcount)
					{
						announce "["+$MD_name$[.@mission]+"] "+getmonsterinfo(.@mobid, MOB_NAME) +" hunted: "+(.@mobsKilled + 1)+"/"+.@mobcount,bc_self,0xF000A0;
					}
					else if (.@mobsKilled == .@mobcount)
					{
						announce "["+$MD_name$[.@mission]+"] "+ "finished hunting "+getmonsterinfo(.@mobid, MOB_NAME) +"!!!";
					}
				}
			}
		}
	}

}


function	script	MD_mission_board	{
	set .@name$, "["+getarg(0)+"]";
	set .@minLevel,getarg(1);
	set .@maxLevel,getarg(2);
	
	set .@size, getarraysize($MD_Name$);
	
	if ( !.@size )
	{
		mes .@name$;
		mes "It appears as though no missions are available to you! Sorry for the inconvenience!";
		close;
	}
	
L_mainMenu:
	mes .@name$;
	menu "Accept Mission",L_acceptMission,
		 "Submit Mission",L_submitMission,
		 "View Missions" ,L_viewMissions,
		 "Cancel Mission",L_cancelMission,
		 "End"           ,L_quit;
L_quit:
	close2;
	end;
	
L_acceptMission:
	set .@slot, callfunc("F_getFreeSlot");
	set .@size, getarraysize($MD_Name$);
	next;
	
	if (.@slot == -1)
	{
		mes .@name$;
		mes "It appears you don't have any free slots remaining. Go complete or delete submissions to free them.";
		close;
	}
	
	
	deletearray .@MDreference; //Cleanup
	deletearray .@MDlist$;
	
	set .@MDlist$[0], 0;
	set .@MDreference[0], 0;
	set .@j, 0;
	// Populate the player's list of missions
	for (set .@i, 0; .@i < .@size; set .@i, .@i+1)
	{
		if($MD_type[.@i] == 1)
		{
			if( ($MD_maxLevel[.@i] > .@maxLevel) || ($MD_minLevel[.@i] < .@minLevel) )
				continue;
				
			if( ($MD_maxLevel[.@i] > BaseLevel) || ($MD_minLevel[.@i] < BaseLevel) )
				continue;
				
			set .@MDlist$[.@j], $MD_name$[.@i];
			set .@MDreference[.@j], .@i;
			set .@j, .@j+1;
		}
	}
	
	set .@menusize, getarraysize(.@MDlist$);
	
	if(.@menusize)
	{
		mes "Ah, it appears you cannot take any of the missions we have. Sorry!";
		close;
	}
	
L_missionMenu:	
	set .@choice, -1;
	while (.@choice < 0)
	{
		mes "Please choose a mission:";

		set .@menustr$, "Cancel";
		
		for (set .@i, 0; .@i < @menusize; set .@i, .@i+1)
		{		
			set .@menustr$, .@menustr$+":".@MDlist$[.@i];
		}
		
		set .@choice, select(.@menustr$) - 1; // -1 to set cancel to 0
		
		if(.@choice == 1)
		{
			// We selected cancel so close!
			mes "Mission selection cancelled..."
			close;
		}
		
		// mission is now selected!
		
		set .@mission, .@MDreference[@choice - 1]; // to match the choice with the MDreference ids;
		// Make sure that the player can actually *take on* the mission.
		if ( callfunc("F_isMissionTaken", .@mission) ) // To ensure no duplicate slots in use
		{
			mes "Error: Mission is already taken. Submit or cancel it to choose another mission.";
			next;
			continue;
		}
		else if ( BaseLevel > $MD_maxLevel[.@mission] ) // To ensure the max level is not exceeded
		{
			mes "Your base level exceeds the mission's max!";
			next;
			continue;
		}
		else if ( BaseLevel < $MD_minLevel[.@mission] ) // To ensure the min level is exceeded!
		{
			mes "You have not yet reached the base level needed for this mission";
			next;
			continue;
		}
		
		// display mission info
		next;
		callfunc("F_showMissionInfo", .@mission);
		next;
		mes "Do you accept?";
		
		if( select("Yes:No") == 2 )
		{
			mes "^00FF00> No^000000";
			mes "Would you like to choose another mission?";
			if( select("Yes:No") == 1)
			{
				next;
				continue;
			}
		}
		
		next;
		mes .@name$;
		callfunc("F_acceptMission",.@slot, .@mission);
		mes "Good luck on this mission!";
		set .@choice, -1;
	}
	close2;
	end;

L_viewMissions:
	set .@j, 0;
	for (set .@i, 0; .@i < $MD_slots; set .@i, .@i + 1)
	{
		set .@mission, getd("MD_slot"+.@i+"_ID");
		
		if (.@mission)
		{
			mes "Slot: "+(.@i+1)+": " +$MD_name[.@mission];
			callfunc "F_mesMissionInfo", .@mission;
			set .@j, .@j+1;
			next;
		}
	}
	if (!.@j)
	{
		mes "No missions selected yet.";
	}
	next;
	goto L_mainMenu;
	
L_cancelMission:
	set .@menustr$, "";
	deletearray(.@MDreference);
	set .@j, 0;
	
	for (set .@i, 0; .@i < $MD_slots; set .@i, .@i + 1)
	{
		set .@mission, getd("MD_slot"+.@i+"_ID");
		
		if (.@mission)
		{
			mes "Slot "+(.@i+1)+": "+$MD_Name$[.@mission];
			set .@menustr$, .@menustr$ + "Slot "+ (.@i+1)+":";
			set .@MDreference[.@j], .@mission;
			set .@j, .@j+1;
		}
	}
	if (!.@j)
	{
		mes "No missions selected yet.";
		next;
		goto L_mainMenu;
	}
	
	set .@menustr$, .@menustr$+"Cancel";
	next;
	
	set .@choice, select(.@menustr$);
	
	if(.@choice == .@j+1)
		goto L_mainMenu;
	
	callfunc "F_mesMissionInfo",.@MDreference[.@choice-1];
	
	next;
	
	mes .@name$;
	mes "Are you sure you want to delete this mission?";
	if (select("Yes:No") == 2)
		goto L_mainMenu;
	
	callfunc "F_endMission", .@MDreference[.@choice-1];
	mes "Mission deleted.";
	next;
	goto L_mainMenu;

L_submitMission:

	set .@menustr$, "";
	
	deletearray .@MDreference;
	set .@j, 0;
	for (set .@i, 0; .@i < $MD_slots; set .@i, .@i + 1)
	{
		set .@mission, getd("MD_slot"+.@i+"_ID");
		
		if(.@mission)
		{
			mes "Slot "+(.@i+1)+": "+$MD_name$[.@mission];
			set .@menustr$, + "Slot " +(.@i+1)+":";
			set .@MDreference[.@j], .@mission;
			set .@j, .@j+1;
		}
	}
	if (!.@j)
	{
		mes "No missions accepted yet..";
		next;
		goto L_mainMenu;
	}

	set .@menustr$, .@menustr$+"Cancel";
	
	
	next;
	set .@choice, select(.@menustr$);
	
	if(.@choice == .@j+1)
		goto L_mainMenu;

	next;
	callfunc("F_mesMissionInfo", .@MDreference[.@choice-1]);
	next;
	mes .@name$;
	mes "Do you want to submit this mission?";
	if (select("Yes:No" == 2)
		goto L_mainMenu;
		
	switch ( callfunc("F_submitMission", .@MDreference[.@choice-1]) )
	{
		// 1 = needs more mobs
		// 2 = needs more items
		// 3 = need more weight for the items 
		// 0 = all good
		case 1:
		case 2:
			mes "You are not done yet!";
			callfunc "F_messageMissionInfo", .@MDreference[.@choice-1];
			break;
		case 3:
			mes "You cannot hold the rewards right now. Please come back after using Kafra Storage.";
			close;
			break;
		case 0:
			mes "Mission complete!! Congratulations!";
			break;
	}
	
	
	next;	
	goto L_mainMenu;

	
}

morocc,47,172,4	script	Mission Board#80	857,{
	callfunc "MD_missionBoard","80-99 Missions",80,99;
}
morocc,47,170,4	script	Mission Board#01	857,{
	callfunc "MD_missionBoard","1-19 Missions",1,19;

}
morocc,47,168,4	script	Mission Board#60	857,{
	callfunc "MD_missionBoard","60-79 Missions",60,79;

}
morocc,47,166,4	script	Mission Board#40	857,{
	callfunc "MD_missionBoard","40-59 Missions",40,59;

}
morocc,47,164,4	script	Mission Board#20	857,{
	callfunc "MD_missionBoard","20-39 Missions",20,39;

}

