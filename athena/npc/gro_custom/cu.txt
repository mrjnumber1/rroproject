-	script	F_cu_main	-1,{
setlowratechar();
ConfigStart:
	set .@menuopts$, "Cancel:Security:Autolog Commands";

	if( Class < Job_Lord_Knight && !(Class >= Job_Wedding || Class <= Job_Xmas ) )
		set .@menuopts$, .@menuopts$ + ":Change Class";
	else if (   (BaseClass == Job_Merchant && checkcart() == 0 && getskilllv("MC_PUSHCART")>0) 
			 ||((Class == Job_Hunter || Class == Job_Sniper) && (checkfalcon() == 0) && (getskilllv("HT_FALCON") > 0) ) 
			 || (BaseJob != Job_Swordman && BaseClass == Job_Swordman && checkriding() == 0 && getskilllv("KN_RIDING")>0)
			)
		set .@menuopts$, .@menuopts$ + ":Rental";
	
	mes "[Groove Control Unit]";
	mes "Please select what you would like to configure";
	
	switch(select(.@menuopts$))
	{
		case 1:
			break;
		case 2:
			callfunc "F_cu_security";
		case 3:
			callsub F_cu_alogcmds;
			break;
		//case 3:
		//	callfunc "F_cu_buffcfg";
		//	break;
		case 4:
			if(Class < Job_Lord_Knight && !(Class >= Job_Wedding || Class <= Job_Xmas ) )
				callfunc "F_cu_jobchange";
			else
				callfunc "F_cu_renter";
	}
	
	close;
	end;
	
OnPCLoginEvent:                    //1           //2         //4        //8         //0x1        //0x4           	//0x8
	setarray @cmds$[0], "Cancel", "autoloot", "showdelay", "showzeny", "showexp", "dropinfo",   "showcasttime", "showcastdelay";

alogcmdstart:
	if(Autolog_Commands)
	{
		message strcharinfo(0),"Initiating @control Autolog Commands";
		for( set .@i, 1; .@i < getarraysize(@cmds$); set .@i, .@i +1)
			if(Autolog_Commands & (1<<.@i-1))
				atcommand "@"+@cmds$[.@i]; 
	}
	else
	{
		message strcharinfo(0),"No Autolog Commands found, use @control/!control to configure.";
		message strcharinfo(0),"Automatically setting @autoloot, @showdelay, @showexp, and @showzeny.";
		set Autolog_Commands, 8|4|2|1;
		goto alogcmdstart;
	}
		
	if(checksecurity() == 0)
		setsecurity(-1);
		
	if(checksecurity() > 0)
	{
		enablesecurity();
		mes "[MEMBER ID SECURITY]";
		mes "Please enter the Member Security number (10000-99999) .....";
		
		input .@num;
		set .@fakehash, (100000-(checksecurity()+3)+7)*5+67;
		if(.@num < 10000 || .@num > 99999 || (.@num !=  .@fakehash) )
		{
			mes "Security Code Invalid. Close your client and try again. Sorry for the inconvenience.";
			end;
		}
		else
		{
			mes "Security Code Accepted. Welcome back, "+strcharinfo(0)+"!";
			disablesecurity();
			close;
		}
	}
	else
		message strcharinfo(0),"Security Code for your Member Accounts DISABLED. You should enable it with @control to protect your items and cash.";
	
	
	end;
	
	
F_cu_alogcmds:	
	next;
	
	set .@menustr$, @cmds$[0];
	for( set .@i, 1; .@i < getarraysize(@cmds$); set .@i, .@i +1 )
		set .@menustr$, .@menustr$ + ":" + @cmds$[.@i];

	// NOTE: NEW COMMANDS MUST BE ADDED AT THE END of @cmds$!


Lcmdcfg:
	for( set .@i, 1; .@i < getarraysize(@cmds$); set .@i, .@i + 1 )
		mes @cmds$[.@i] + " " + ((Autolog_Commands & (1<<(.@i-1)))?"^00FF00Enabled^000000":"^FF0000Disabled^000000");	




	select(.@menustr$);
	if(@menu != 1)
		set Autolog_Commands, Autolog_Commands ^ (1<<(@menu-2));
	else
		close;

		
	next;
	goto Lcmdcfg;

	end;

}








function	script	F_cu_renter	{

	if((BaseClass == Job_Merchant && checkcart() == 0 && getskilllv("MC_PUSHCART")>0))
		setcart;
	else if(BaseJob != Job_Archer && BaseClass == Job_Archer && checkfalcon() == 0 && getskilllv("HT_FALCON")>0)
		setfalcon;
	else if (BaseJob != Job_Swordman && BaseClass == Job_Swordman && checkriding() == 0 && getskilllv("KN_RIDING")>0)
		setriding;
	else
		message strcharinfo(0), "You are not allowed to use this function!";
		
	close;		
}



function	script	F_cu_lr_jobchange	{

	mes "^ff0000[Job Master]^000000";
	if(Upper == 1 && Class >= Job_Lord_Knight) goto L_noReq;
	if(SkillPoint != 0){
		mes "I'm sorry, please use up all your skill points before changing jobs";
		mes "Please come again soon!";
		close;
	}
	if(JobLevel < 10) goto L_LvError;
	switch(Class){
		case Job_Novice_High:
		case Job_Baby:
		case Job_Novice:
			skill 142,1,0;
			skill 143,1,0;
			mes "Welcome, please select the job you wish to change into";
			if(lastJob != 0 && Class == Job_Novice_High){
				switch(lastJob){
					case Job_Knight:
					case Job_Crusader:
						set @target_job, Job_Swordman_High;
						break;
					case Job_Monk:
					case Job_Priest:
						set @target_job, Job_Acolyte_High;
						break;
					case Job_Alchemist:
					case Job_Blacksmith:
						set @target_job, Job_Merchant_High;
						break;
					case Job_Rogue:
					case Job_Assassin:
						set @target_job, Job_Thief_High;
						break;
					case Job_Wizard:
					case Job_Sage:
						set @target_job, Job_Mage_High;
						break;
					case Job_Hunter:
					case Job_Bard:
					case Job_Dancer:
						set @target_job, Job_Archer_High;
						break;
							}
			} else {
				switch(select("Swordsman","Mage","Archer","Acolyte","Merchant","Thief",
					"Super Novice","Taekwon","Gunslinger","Ninja")){
						case 7:
							if(Class == Job_Novice_High) goto L_noReq;
							if($@JC_SupNovM > BaseLevel) goto L_BvError;
							if(Upper == 2)
								set @target_job, Job_Super_Baby;
							else
								set @target_job, Job_SuperNovice;
							break;
						case 8:
							if(Class == Job_Novice_High) goto L_noReq;
							if(Upper == 2) goto L_noReq;
							set @target_job, Job_Taekwon;
							break;
						case 9:
						case 10:
							if(Class == Job_Novice_High || Upper == 2) goto L_noReq;
							set @target_job, @menu + 15;
							break;
						default:
							set @target_job, @menu;
							if(Class == Job_Novice_High) set @target_job, @target_job + 4001;
							break;
					}
			}
			mes "Are you sure you want to change to " + JobName(@target_job) + "?";
			if(select("No","Yes") == 2){
				callfunc "Job_Change", @target_job;
				if(@target_job == Job_Gunslinger || @target_job == Job_Ninja || @target_job == Job_Taekwon) {
					callfunc "F_ClearJobVar";
				} else {
					if($@JC_Plat) goto L_GivePlat;
				}
			}
			close;
			break;
		default:
			if(JobLevel < $@JC_MinimumJB) goto L_LvError;
			deletearray @job_opt, getarraysize(@job_opt);
			if(Class < Job_Knight || Class == Job_Taekwon || (Class > Job_Baby && Class < Job_Baby_Knight) || (Class > Job_Novice_High && Class < Job_Lord_Knight)){
				if(lastJob != 0){
					set @target_job, lastJob + 4001;
				} else {
					switch(Class){
						case Job_Swordman_High:
						case Job_Baby_Swordman:
						case Job_Swordman:
							set @job_opt[0], Job_Knight;
							set @job_opt[1], Job_Crusader;
							break;
						case Job_Mage_High:
						case Job_Baby_Mage:
						case Job_Mage:
							set @job_opt[0], Job_Wizard;
							set @job_opt[1], Job_Sage;
							break;
						case Job_Archer_High:
						case Job_Baby_Archer:
						case Job_Archer:
							set @job_opt[0], Job_Hunter;
							if(Sex == 0)
								set @job_opt[1], Job_Dancer;
							else
								set @job_opt[1], Job_Bard;
							break;
						case Job_Acolyte_High:
						case Job_Baby_Acolyte:
						case Job_Acolyte:
							set @job_opt[0], Job_Priest;
							set @job_opt[1], Job_Monk;
							break;
						case Job_Merchant_High:
						case Job_Baby_Merchant:
						case Job_Merchant:
							set @job_opt[0], Job_Blacksmith;
							set @job_opt[1], Job_Alchemist;
							break;
						case Job_Thief_High:
						case Job_Baby_Thief:
						case Job_Thief:
							set @job_opt[0], Job_Assassin;
							set @job_opt[1], Job_Rogue;
							break;						
						default:
							set @job_opt[0], Job_Star_Gladiator;
							set @job_opt[1], Job_Soul_Linker;
							break;
					}
					mes "Welcome, please select the job you wish to change into";
					set @target_job, @job_opt[select(JobName(@job_opt[0]), JobName(@job_opt[1]))-1];
					if(Class > Job_Novice_High && Class < Job_Lord_Knight) set @target_job, @target_job + 4001;
				}
				mes "Are you sure you want to change to " + JobName(@target_job) + "?";
				if(select("No","Yes")==2){
					callfunc "Job_Change", @target_job;
					if(@target_job == Job_Star_Gladiator || @target_job == Job_Soul_Linker) {
						callfunc "F_ClearJobVar";
					} else {
						if($@JC_Plat) goto L_GivePlat;
					}
				}
				close;
			}
			if(checkfalcon() || checkcart() || checkriding()) goto L_remove;
			if((Class >=Job_Knight) && (Class <=Job_Crusader2)){
				mes "Do you want to reborn?";
				if(select("Yes","No")==1){
					if(BaseLevel < 99 || JobLevel < 50) goto L_cantCh;
					set lastJob, Class;
					if(Class == Job_Knight2){
						set lastJob, Job_Knight;
					} else {
						if(Class == Job_Crusader2){
							set lastJob, Job_Crusader;
						}
					}
					jobchange Job_Novice_High;
					resetlvl(1);
					skill 142,1,0;
					skill 143,1,0;
				}
				close;
			}
	}
	mes "I'm sorry, there are no further classes for your job.";
	close;

L_GivePlat:
	if (BaseClass==Job_SuperNovice) goto L_sSuperN;
	if (BaseClass==Job_Swordman) goto L_sSword;
	if (BaseClass==Job_Mage) goto L_sMage;
	if (BaseClass==Job_Archer) goto L_sArcher;
	if (BaseClass==Job_Acolyte) goto L_sAcolyte;
	if (BaseClass==Job_Merchant) goto L_sMerchant;
	if (BaseClass==Job_Thief) goto L_sThief;
	close;
L_sSuperN:
	skill 142,1,0;
	close;
L_sSword:
	skill 142,1,0;
	skill 144,1,0;
	skill 145,1,0;
	skill 146,1,0;
	close;
L_sMage:
	skill 142,1,0;
	skill 157,1,0;
	close;
L_sArcher:
	skill 142,1,0;
	skill 147,1,0;
	skill 148,1,0;
	close;
L_sAcolyte:
	skill 142,1,0;
	skill 156,1,0;
	close;
L_sMerchant:
	skill 142,1,0;
	skill 153,1,0;
	skill 154,1,0;
	skill 155,1,0;
	close;
L_sThief:
	skill 142,1,0;
	skill 149,1,0;
	skill 150,1,0;
	skill 151,1,0;
	skill 152,1,0;
	close;

L_cantCh:
	mes "I'm sorry, you do not meet the requirements to change";
	mes "Please come again soon!";
	close;

L_LvError:
	mes "I'm sorry, you do not seem to have enough Job Levels";
	mes "Please come again soon!";
	close;

L_BvError:
	mes "I'm sorry, you do not seem to have enough Base Levels";
	mes "Please come again soon!";
	close;

L_noReq:
	mes "I'm sorry, you do not meet the requirements to change";
	mes "Please come again soon!";
	close;

L_remove:
	mes "Please remove your cart,falcon or peco";
	mes "Please come again soon!";
	close;

OnInit:
	// Variable Setup
	set $@JC_MinimumJB, 40; //Minimum job level for changing between 2nd and advance Class (Default : 40)
	set $@JC_Plat, 1; //Give Platinum skills on Jobchange (Default : 1-yes)
	set $@JC_SupNovM, 45; //Base Level to change into Super Novice (Default : 45)
	end;
	
}

function	script	F_cu_jobchange	{
	next;

	if(Class == Job_Novice && islowratechar() == 0)
	{
		mes "First you must decide, will you be a LR char or a BG char?";
		mes "If you choose to be a LR char, the amount of content you are limited to is none. However you will have to level up at the server rates";
		mes "If you choose to be a BG char you will be instantly maxed out in level, but you may not leave any towns, WoE areas, or the BG areas.";
		switch(select("Cancel:I want all content available:I just want instant 99."))
		{
			case 1:
				close;
				break;
			case 2:
				setlowratechar();
				next;
				callfunc "F_cu_lr_jobchange";
				break;
			case 3:
				next;
				goto OnBGChar;
				break;
		}
	}
	
	if(islowratechar()==1)
	{
		callfunc "F_cu_lr_jobchange";
	}
	
	end;
OnBGChar:

	if(Class != Job_Novice)
	{
		message strcharinfo(0), "You are not allowed to use this function!";
		end;
	}
	
	
	set .@jobids[0], 0;
	set .@j, 0;
	for( set .@i, Job_Lord_Knight ; .@i <= Job_Clown; set .@i, .@i + 1)
	{
		if(.@i == Job_Lord_Knight2)
			continue;
	
		set .@jobids[.@j], .@i;
		set .@j, .@j + 1;
	}
	set .@jobids[.@j], Job_Soul_Linker;
	set .@jobids[.@j+1], Job_Star_Gladiator;
	set .@jobids[.@j+2], Job_Taekwon;
	set .@jobids[.@j+3], Job_Ninja;
	set .@jobids[.@j+4], Job_Gunslinger;
	
	set .@j, .@j+4;
		
	set .@jmenu$, jobname(.@jobids[0]);
	for( set .@i, 1; .@i < .@j; set .@i, .@i + 1)
	{
		if (.jobids[.@i] != Job_Clown) 
			set .@jmenu$, .@jmenu$ + ":" + jobname(.@jobids[.@i]);
		else
			set .@jmenus$, .@jmenu$ + ":" + "Minstrel/Gypsy";
	}
	
	
	
	
	
	mes "Please select the job you wish to change to.";
	mes "Remember, after you change, you will be that job forever.";
	
	select(.@jmenu$);
	
	
	set .@jid, .@jobids[@menu-1];
	set .@blv, 99;
	set .@jlv, 70;
	set .@skpoint, 9+49+69;
	
	if( .@jid == Job_Clown && Sex == 0 )
	{
		set .@jid, Job_Gypsy;
	}
	else if(.@jid == Job_Soul_Linker || .@jid == Job_Star_Gladiator)
	{
		set .@jlv, 50;
		set .@skpoint, 9+49+49;
	}
	else if(.@jid == Job_Taekwon)
	{
		set .@jlv, 50;
		set .@skpoint, 9+49;
	}
	else if(.@jid == Job_Ninja || .@jid == Job_Gunslinger)
	{
		set .@skpoint, 9+69;
	}

	
	
	
	jobchange .@jid;
	set BaseLevel, .@blv;
	set JobLevel, .@jlv;
	set SkillPoint, .@skpoint;
	ResetSkill;
	ResetStatus;
	
	
	
	
	// derp
	skill 142,1,0; // First Aid

	// first job skills
	if (BaseClass == Job_Swordman) {
		skill 144,1,0; // Moving HP-Recovery
		skill 145,1,0; // Fatal Blow
		skill 146,1,0; // Auto Berserk
	} 
	else if (BaseClass == Job_Mage) {
		skill 157,1,0; // Energy Coat
	} 
	else if (BaseClass == Job_Archer) {
		skill 147,1,0; // Arrow Crafting
		skill 148,1,0; // Arrow Repel
	} 
	else if (BaseClass == Job_Merchant) {
		skill 153,1,0; // Cart Revolution
		skill 154,1,0; // Change Cart
		skill 155,1,0; // Crazy Uproar
	} 
	else if (BaseClass == Job_Thief) {
		skill 149,1,0; // Sand Attack
		skill 150,1,0; // Back Slide
		skill 151,1,0; // Find Stone
		skill 152,1,0; // Stone Fling
	} 
	else if (BaseClass == Job_Acolyte) {
		skill 156,1,0; // Holy Light
	}
	
	
	
	// second job skills
	if (Class == Job_Lord_Knight) {
		skill 1001,1,0; // Charge Attack
	} 
	else if (Class == Job_Paladin) {
		skill 1002,1,0; // Shrink
	} 
	else if (Class == Job_High_Wizard) {
		skill 1006,1,0; // Sight Blaster
	} 
	else if (Class == Job_Professor) {
		skill 1007,1,0; // Create Elemental Converter
		skill 1008,1,0; // Elemental Change Water
		skill 1017,1,0; // Elemental Change Earth
		skill 1018,1,0; // Elemental Change Fire
		skill 1019,1,0; // Elemental Change Wind
	} 
	else if (Class == Job_Sniper) {
		skill 1009,1,0; // Phantasmic Arrow
	} 
	else if (Class == Job_Clown) {
		skill 1010,1,0; // Pang Voice
	} 
	else if (Class == Job_Gypsy) {
		skill 1011,1,0; // Wink of Charm
	} 
	else if (Class == Job_Whitesmith) {
		skill 1012,1,0; // Unfair Trick
		skill 1013,1,0; // Greed
	} 
	else if (Class == Job_Creator) {
		skill 238,1,0; // Bioethics
	}
	else if (Class == Job_Assassin_Cross) {
		skill 1003,1,0; // Sonic Acceleration
		skill 1004,1,0; // Throw Venom Knife
	} 
	else if (Class == Job_Stalker) {
		skill 1005,1,0; // Close Confine
	} 
	else if (Class == Job_High_Priest) {
		skill 1014,1,0; // Redemptio
	} 
	else if (Class == Job_Champion) {
		skill 1015,1,0; // Ki Translation
		skill 1016,1,0; // Ki Explosion
	}
	
	
	close;
}


function	script	F_cu_buffcfg	{
	
	setarray @color$[0], "7F7F7F", "0000E5", "3F2F1F", "8F0000", "AFAF00", "5F1F5F", "BFBFBF", "2F2F2F";
	setarray @cname$[0],"Neutral",  "Water",  "Earth",	 "Fire",    "Wind","Poison",   "Holy","Shadow";
	
	next;
	mes "[Buff Configuration]";
	mes "Please choose what you would like to toggle.";
	mes "Current Options:";
	set .@status$, (Buff_Conf & (1 << 0))?("Assumptio"):("Kyrie Eleison");
	mes "Use "+.@status$;
	set .@status$, (Buff_Conf&(1<<1))?("Scrolls will be refreshed and consumed when using the buffer."):("Scrolls will NOT refresh from using the buffer.");
	mes .@status$;
	set .@status$, (Buff_Conf&(1<<2))?("You will be linked by the buffer."):("You will NOT be linked by the buffer.");
	mes .@status$;
	
	mes "The current element is ^"+@color$[BuffWpnEle]+@name$[BuffWpnEle]+"^000000";
	
	menu "Assumptio/Kyrie",LAKToggle,"Scroll Consumption",LSCToggle,"Auto Soul Link",LALToggle,"Element Endow",LENToggle;
	
	
LAKToggle:
	next;
	set .@status$, (Buff_Conf & (1 << 0))?("Assumptio"):("Kyrie Eleison");
	mes "[Buff Configuration]";
	mes "Please choose an option.";
	select("Assumptio:Kyrie Eleison");

	set Buff_Conf, Buff_Conf ^ (1<<(@menu-1+1));
	
	next;					
	set .@status$, (Buff_Conf & (1 << 0))?("Assumptio"):("Kyrie Eleison");
	
	mes "[Buff Configuration]";
	mes "The option was set to:";
	mes .@status$;
	close;
	
	
	
	
LSCToggle:
	next;
	set .@status$, (Buff_Conf&(1<<1))?("Scrolls will be refreshed and consumed when using the buffer."):("Scrolls will NOT refresh from using the buffer.");
	mes "[Buff Configuration]";
	mes "The current option is:";
	mes .@status$;
	select("Refresh scrolls:Don't refresh scrolls");

	set Buff_Conf, Buff_Conf ^ (1<<(@menu-1+2));
	
	
	next;
	set .@status$, (Buff_Conf&(1<<1))?("Scrolls will be refreshed and consumed when using the buffer."):("Scrolls will NOT refresh from using the buffer.");
	
	mes "[Buff Configuration]";;
	mes "The option was set to:";
	mes .@status$;
	close;

LALToggle:
	next;
	set .@status$, (Buff_Conf&(1<<2))?("You will be linked by the buffer."):("You will NOT be linked by the buffer.");
	mes "[Buff Configuration]";
	mes "The current option is:";
	mes .@status$;
	
	select("Give Soul Link:Don't give Soul Link");

	set Buff_Conf, Buff_Conf ^ (1<<(@menu-1+3));
	
	
	next;
	set .@status$, (Buff_Conf&(1<<2))?("You will be linked by the buffer."):("You will NOT be linked by the buffer.");
	
	mes "[Buff Configuration]";
	mes "The option was set to:";
	mes .@status$;
	close;
	
LENToggle:
	next;
	mes "[Buff Configuration]";
	mes "The current element is ^"+@color$[BuffWpnEle]+@name$[BuffWpnEle]+"^000000";
	
	
	select("Neutral","Water","Earth","Fire","Wind","Poison","Holy","Shadow");

	set BuffWpnEle, @menu;
	
	next;
	mes "[Buff Configuration]";
	mes "Buffer Element changed to ^"+@color$[BuffWpnEle]+@name$[BuffWpnEle]+"^000000";
	close;
	
	
	
}


function	script	F_cu_security	{

OnSetCode:
	mes "[MEMBER ID SECURITY]";
	
	if(checksecurity() > 0 || checksecurity() == -1)
	{
		mes "Please enter your desired NEW security number (10000-99999) .....";
		input .@num;
		if(.@num < 10000 || .@num > 99999)
		{
			mes "Security Code out of bounds. Sorry, try again using a number from (10000-99999).";
			close;
		}
		else
		{
			mes "Security Code accepted.";
			setsecurity( (100000-(.@num+3)+7)*5+67 );
			close;
		}
	}
	else
	{
		mes "You may not set the user security because you are not accepted! Somehow! How the fuck are you seeing this? Goddamnit mrj messed something up somewhere -_-";
		close;
	}
	
	message strcharinfo(0),"How did you get here? Please report this @security oddity to a dev!";
	end;

}


